область видимости
    блочная{}
                {int a;}
                int main(){
                    int a=5;
                    print(a)
                    {
                        int a=15;
                        printfa
                    }
                printf(a);
                }
    видимый прототип
        int f(int a);
    файловая
        int main(){
            int st=15;
        }

связывание
    блочная не имеет
    файловая и внутреннюю, и внешнюю; в 1 файле

    static int st=15;-внутреннее

    int pp=44;
    int f1(int a) {
        extern int pp;-внешнее связывание
    }

длительность хранения
    АВТОМАТИЧЕСКОЕ -ВНУТРИ БЛОКА
    статическое- на всем протяжении программы

int main(){
    int a=15, i;
    for (i=0; i<20; i++)
    f(a)
    return 0;
}
int f(int a) {
    satic int s=1;
    int s2=1;
    prinf("%u %u\n", s1++, s2++);
    return 0;
}

класссы хранения 
    auto int p=4;-автоматический
________________________________________________________________________________________________________
указатели
адрес- ячейка памяти
а=5 с адресом 1000
а -5
&a -10000

    переменные в которые записывают адрес
        int a=5;
        int *ptr;
        char ch='*';
        char *pc;
        ptr=&a;//1000
        pc=&ch;
    ptr+1 // 1000+4 -ед хранения колво байтов этой переменной(int)
    pc+1// 1000+1(char)
     
    присвоение
     взятие адреса
     инкремент +1
     + целая константа
     декремент
     - константа
     разница адресов -для строк получение индекса
     сложение адресов неопределенозначение 

разименование *ptr- значение переменной адрес которой хранится в указателе

int a[5], i, *ptr;
ptr = a;
for (i=0; i<5; i++){
    scanf("%d", ptr+1);
    prinf("%d", *prt +1);
}
int a[5] = {1,2,3,4,5}
int *ptr;
ptr=a;
*ptr+1;//2
*(ptr+1);//2

int *ptr;n=10;
<stdlib.h>
ptr=(int*) malloc(n*sizeof(int));- возвращает адрес первого байта
5*sizeof(int);
4*4
40
float a;
a=(float)5/4;

colloc(n,4);
free(ptr);
%p 
%u